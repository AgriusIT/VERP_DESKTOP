''------------------------------------------------------------------------------
'' <auto-generated>
''     This code was generated by a tool.
''     Runtime Version:4.0.30319.18408
''
''     Changes to this file may cause incorrect behavior and will be lost if
''     the code is regenerated.
'' </auto-generated>
''------------------------------------------------------------------------------

'Option Strict Off
'Option Explicit On



' '''<summary>
' '''Represents a strongly typed in-memory cache of data.
' '''</summary>
'<Global.System.Serializable(),  _
' Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
' Global.System.ComponentModel.ToolboxItem(true),  _
' Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
' Global.System.Xml.Serialization.XmlRootAttribute("dsEmployee_Card"),  _
' Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
'Partial Public Class dsEmployee_Card
'    Inherits Global.System.Data.DataSet

'    Private tableEmployee As EmployeeDataTable

'    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Public Sub New()
'        MyBase.New()
'        Me.BeginInit()
'        Me.InitClass()
'        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
'        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
'        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
'        Me.EndInit()
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
'        MyBase.New(info, context, False)
'        If (Me.IsBinarySerialized(info, context) = True) Then
'            Me.InitVars(False)
'            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
'            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
'            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
'            Return
'        End If
'        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
'        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
'            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
'            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
'            If (Not (ds.Tables("Employee")) Is Nothing) Then
'                MyBase.Tables.Add(New EmployeeDataTable(ds.Tables("Employee")))
'            End If
'            Me.DataSetName = ds.DataSetName
'            Me.Prefix = ds.Prefix
'            Me.Namespace = ds.Namespace
'            Me.Locale = ds.Locale
'            Me.CaseSensitive = ds.CaseSensitive
'            Me.EnforceConstraints = ds.EnforceConstraints
'            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
'            Me.InitVars()
'        Else
'            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
'        End If
'        Me.GetSerializationData(info, context)
'        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
'        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
'        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
'     Global.System.ComponentModel.Browsable(False), _
'     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
'    Public ReadOnly Property Employee() As EmployeeDataTable
'        Get
'            Return Me.tableEmployee
'        End Get
'    End Property

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
'     Global.System.ComponentModel.BrowsableAttribute(True), _
'     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
'    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
'        Get
'            Return Me._schemaSerializationMode
'        End Get
'        Set(value As Global.System.Data.SchemaSerializationMode)
'            Me._schemaSerializationMode = value
'        End Set
'    End Property

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
'     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
'    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
'        Get
'            Return MyBase.Tables
'        End Get
'    End Property

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
'     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
'    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
'        Get
'            Return MyBase.Relations
'        End Get
'    End Property

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Protected Overrides Sub InitializeDerivedDataSet()
'        Me.BeginInit()
'        Me.InitClass()
'        Me.EndInit()
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Public Overrides Function Clone() As Global.System.Data.DataSet
'        Dim cln As dsEmployee_Card = CType(MyBase.Clone, dsEmployee_Card)
'        cln.InitVars()
'        cln.SchemaSerializationMode = Me.SchemaSerializationMode
'        Return cln
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Protected Overrides Function ShouldSerializeTables() As Boolean
'        Return False
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Protected Overrides Function ShouldSerializeRelations() As Boolean
'        Return False
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
'        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
'            Me.Reset()
'            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
'            ds.ReadXml(reader)
'            If (Not (ds.Tables("Employee")) Is Nothing) Then
'                MyBase.Tables.Add(New EmployeeDataTable(ds.Tables("Employee")))
'            End If
'            Me.DataSetName = ds.DataSetName
'            Me.Prefix = ds.Prefix
'            Me.Namespace = ds.Namespace
'            Me.Locale = ds.Locale
'            Me.CaseSensitive = ds.CaseSensitive
'            Me.EnforceConstraints = ds.EnforceConstraints
'            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
'            Me.InitVars()
'        Else
'            Me.ReadXml(reader)
'            Me.InitVars()
'        End If
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
'        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
'        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
'        stream.Position = 0
'        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Friend Overloads Sub InitVars()
'        Me.InitVars(True)
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
'        Me.tableEmployee = CType(MyBase.Tables("Employee"), EmployeeDataTable)
'        If (initTable = True) Then
'            If (Not (Me.tableEmployee) Is Nothing) Then
'                Me.tableEmployee.InitVars()
'            End If
'        End If
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Private Sub InitClass()
'        Me.DataSetName = "dsEmployee_Card"
'        Me.Prefix = ""
'        Me.Namespace = "http://tempuri.org/dsEmployee_Card.xsd"
'        Me.EnforceConstraints = True
'        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
'        Me.tableEmployee = New EmployeeDataTable()
'        MyBase.Tables.Add(Me.tableEmployee)
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Private Function ShouldSerializeEmployee() As Boolean
'        Return False
'    End Function

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
'        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
'            Me.InitVars()
'        End If
'    End Sub

'    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
'        Dim ds As dsEmployee_Card = New dsEmployee_Card()
'        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
'        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
'        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
'        any.Namespace = ds.Namespace
'        sequence.Items.Add(any)
'        type.Particle = sequence
'        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
'        If xs.Contains(dsSchema.TargetNamespace) Then
'            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
'            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
'            Try
'                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
'                dsSchema.Write(s1)
'                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
'                Do While schemas.MoveNext
'                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
'                    s2.SetLength(0)
'                    schema.Write(s2)
'                    If (s1.Length = s2.Length) Then
'                        s1.Position = 0
'                        s2.Position = 0

'                        Do While ((s1.Position <> s1.Length) _
'                                    AndAlso (s1.ReadByte = s2.ReadByte))


'                        Loop
'                        If (s1.Position = s1.Length) Then
'                            Return type
'                        End If
'                    End If

'                Loop
'            Finally
'                If (Not (s1) Is Nothing) Then
'                    s1.Close()
'                End If
'                If (Not (s2) Is Nothing) Then
'                    s2.Close()
'                End If
'            End Try
'        End If
'        xs.Add(dsSchema)
'        Return type
'    End Function

'    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Public Delegate Sub EmployeeRowChangeEventHandler(ByVal sender As Object, ByVal e As EmployeeRowChangeEvent)

'    '''<summary>
'    '''Represents the strongly named DataTable class.
'    '''</summary>
'    <Global.System.Serializable(), _
'     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
'    Partial Public Class EmployeeDataTable
'        Inherits Global.System.Data.DataTable
'        Implements Global.System.Collections.IEnumerable

'        Private columnEmployee_ID As Global.System.Data.DataColumn

'        Private columnNIC As Global.System.Data.DataColumn

'        Private columnBlood_Group As Global.System.Data.DataColumn

'        Private columnEmpPicture As Global.System.Data.DataColumn

'        Private columnDOB As Global.System.Data.DataColumn

'        Private columnEmployeeDeptName As Global.System.Data.DataColumn

'        Private columnEmployee_Code As Global.System.Data.DataColumn

'        Private columnEmployee_Name As Global.System.Data.DataColumn

'        Private columnPicture As Global.System.Data.DataColumn

'        Private columnGender As Global.System.Data.DataColumn

'        Private columnEmployeeDesignationName As Global.System.Data.DataColumn

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub New()
'            MyBase.New()
'            Me.TableName = "Employee"
'            Me.BeginInit()
'            Me.InitClass()
'            Me.EndInit()
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Friend Sub New(ByVal table As Global.System.Data.DataTable)
'            MyBase.New()
'            Me.TableName = table.TableName
'            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
'                Me.CaseSensitive = table.CaseSensitive
'            End If
'            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
'                Me.Locale = table.Locale
'            End If
'            If (table.Namespace <> table.DataSet.Namespace) Then
'                Me.Namespace = table.Namespace
'            End If
'            Me.Prefix = table.Prefix
'            Me.MinimumCapacity = table.MinimumCapacity
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
'            MyBase.New(info, context)
'            Me.InitVars()
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property Employee_IDColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnEmployee_ID
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property NICColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnNIC
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property Blood_GroupColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnBlood_Group
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property EmpPictureColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnEmpPicture
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property DOBColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnDOB
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property EmployeeDeptNameColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnEmployeeDeptName
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property Employee_CodeColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnEmployee_Code
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property Employee_NameColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnEmployee_Name
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property PictureColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnPicture
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnGender
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property EmployeeDesignationNameColumn() As Global.System.Data.DataColumn
'            Get
'                Return Me.columnEmployeeDesignationName
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
'         Global.System.ComponentModel.Browsable(False)> _
'        Public ReadOnly Property Count() As Integer
'            Get
'                Return Me.Rows.Count
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Default Public ReadOnly Property Item(ByVal index As Integer) As EmployeeRow
'            Get
'                Return CType(Me.Rows(index), EmployeeRow)
'            End Get
'        End Property

'        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Event EmployeeRowChanging As EmployeeRowChangeEventHandler

'        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Event EmployeeRowChanged As EmployeeRowChangeEventHandler

'        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Event EmployeeRowDeleting As EmployeeRowChangeEventHandler

'        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Event EmployeeRowDeleted As EmployeeRowChangeEventHandler

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Overloads Sub AddEmployeeRow(ByVal row As EmployeeRow)
'            Me.Rows.Add(row)
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Overloads Function AddEmployeeRow(ByVal Employee_ID As Integer, ByVal NIC As String, ByVal Blood_Group As String, ByVal EmpPicture As String, ByVal DOB As Date, ByVal EmployeeDeptName As String, ByVal Employee_Code As String, ByVal Employee_Name As String, ByVal Picture() As Byte, ByVal Gender As String, ByVal EmployeeDesignationName As String) As EmployeeRow
'            Dim rowEmployeeRow As EmployeeRow = CType(Me.NewRow, EmployeeRow)
'            Dim columnValuesArray() As Object = New Object() {Employee_ID, NIC, Blood_Group, EmpPicture, DOB, EmployeeDeptName, Employee_Code, Employee_Name, Picture, Gender, EmployeeDesignationName}
'            rowEmployeeRow.ItemArray = columnValuesArray
'            Me.Rows.Add(rowEmployeeRow)
'            Return rowEmployeeRow
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
'            Return Me.Rows.GetEnumerator
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Overrides Function Clone() As Global.System.Data.DataTable
'            Dim cln As EmployeeDataTable = CType(MyBase.Clone, EmployeeDataTable)
'            cln.InitVars()
'            Return cln
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
'            Return New EmployeeDataTable()
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Friend Sub InitVars()
'            Me.columnEmployee_ID = MyBase.Columns("Employee_ID")
'            Me.columnNIC = MyBase.Columns("NIC")
'            Me.columnBlood_Group = MyBase.Columns("Blood_Group")
'            Me.columnEmpPicture = MyBase.Columns("EmpPicture")
'            Me.columnDOB = MyBase.Columns("DOB")
'            Me.columnEmployeeDeptName = MyBase.Columns("EmployeeDeptName")
'            Me.columnEmployee_Code = MyBase.Columns("Employee_Code")
'            Me.columnEmployee_Name = MyBase.Columns("Employee_Name")
'            Me.columnPicture = MyBase.Columns("Picture")
'            Me.columnGender = MyBase.Columns("Gender")
'            Me.columnEmployeeDesignationName = MyBase.Columns("EmployeeDesignationName")
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Private Sub InitClass()
'            Me.columnEmployee_ID = New Global.System.Data.DataColumn("Employee_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnEmployee_ID)
'            Me.columnNIC = New Global.System.Data.DataColumn("NIC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnNIC)
'            Me.columnBlood_Group = New Global.System.Data.DataColumn("Blood_Group", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnBlood_Group)
'            Me.columnEmpPicture = New Global.System.Data.DataColumn("EmpPicture", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnEmpPicture)
'            Me.columnDOB = New Global.System.Data.DataColumn("DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnDOB)
'            Me.columnEmployeeDeptName = New Global.System.Data.DataColumn("EmployeeDeptName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnEmployeeDeptName)
'            Me.columnEmployee_Code = New Global.System.Data.DataColumn("Employee_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnEmployee_Code)
'            Me.columnEmployee_Name = New Global.System.Data.DataColumn("Employee_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnEmployee_Name)
'            Me.columnPicture = New Global.System.Data.DataColumn("Picture", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnPicture)
'            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnGender)
'            Me.columnEmployeeDesignationName = New Global.System.Data.DataColumn("EmployeeDesignationName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
'            MyBase.Columns.Add(Me.columnEmployeeDesignationName)
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function NewEmployeeRow() As EmployeeRow
'            Return CType(Me.NewRow, EmployeeRow)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
'            Return New EmployeeRow(builder)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Protected Overrides Function GetRowType() As Global.System.Type
'            Return GetType(EmployeeRow)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
'            MyBase.OnRowChanged(e)
'            If (Not (Me.EmployeeRowChangedEvent) Is Nothing) Then
'                RaiseEvent EmployeeRowChanged(Me, New EmployeeRowChangeEvent(CType(e.Row, EmployeeRow), e.Action))
'            End If
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
'            MyBase.OnRowChanging(e)
'            If (Not (Me.EmployeeRowChangingEvent) Is Nothing) Then
'                RaiseEvent EmployeeRowChanging(Me, New EmployeeRowChangeEvent(CType(e.Row, EmployeeRow), e.Action))
'            End If
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
'            MyBase.OnRowDeleted(e)
'            If (Not (Me.EmployeeRowDeletedEvent) Is Nothing) Then
'                RaiseEvent EmployeeRowDeleted(Me, New EmployeeRowChangeEvent(CType(e.Row, EmployeeRow), e.Action))
'            End If
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
'            MyBase.OnRowDeleting(e)
'            If (Not (Me.EmployeeRowDeletingEvent) Is Nothing) Then
'                RaiseEvent EmployeeRowDeleting(Me, New EmployeeRowChangeEvent(CType(e.Row, EmployeeRow), e.Action))
'            End If
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub RemoveEmployeeRow(ByVal row As EmployeeRow)
'            Me.Rows.Remove(row)
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
'            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
'            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
'            Dim ds As dsEmployee_Card = New dsEmployee_Card()
'            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
'            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
'            any1.MinOccurs = New Decimal(0)
'            any1.MaxOccurs = Decimal.MaxValue
'            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
'            sequence.Items.Add(any1)
'            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
'            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
'            any2.MinOccurs = New Decimal(1)
'            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
'            sequence.Items.Add(any2)
'            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
'            attribute1.Name = "namespace"
'            attribute1.FixedValue = ds.Namespace
'            type.Attributes.Add(attribute1)
'            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
'            attribute2.Name = "tableTypeName"
'            attribute2.FixedValue = "EmployeeDataTable"
'            type.Attributes.Add(attribute2)
'            type.Particle = sequence
'            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
'            If xs.Contains(dsSchema.TargetNamespace) Then
'                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
'                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
'                Try
'                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
'                    dsSchema.Write(s1)
'                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
'                    Do While schemas.MoveNext
'                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
'                        s2.SetLength(0)
'                        schema.Write(s2)
'                        If (s1.Length = s2.Length) Then
'                            s1.Position = 0
'                            s2.Position = 0

'                            Do While ((s1.Position <> s1.Length) _
'                                        AndAlso (s1.ReadByte = s2.ReadByte))


'                            Loop
'                            If (s1.Position = s1.Length) Then
'                                Return type
'                            End If
'                        End If

'                    Loop
'                Finally
'                    If (Not (s1) Is Nothing) Then
'                        s1.Close()
'                    End If
'                    If (Not (s2) Is Nothing) Then
'                        s2.Close()
'                    End If
'                End Try
'            End If
'            xs.Add(dsSchema)
'            Return type
'        End Function
'    End Class

'    '''<summary>
'    '''Represents strongly named DataRow class.
'    '''</summary>
'    Partial Public Class EmployeeRow
'        Inherits Global.System.Data.DataRow

'        Private tableEmployee As EmployeeDataTable

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
'            MyBase.New(rb)
'            Me.tableEmployee = CType(Me.Table, EmployeeDataTable)
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property Employee_ID() As Integer
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.Employee_IDColumn), Integer)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_ID' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As Integer)
'                Me(Me.tableEmployee.Employee_IDColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property NIC() As String
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.NICColumn), String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'NIC' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As String)
'                Me(Me.tableEmployee.NICColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property Blood_Group() As String
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.Blood_GroupColumn), String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'Blood_Group' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As String)
'                Me(Me.tableEmployee.Blood_GroupColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property EmpPicture() As String
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.EmpPictureColumn), String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmpPicture' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As String)
'                Me(Me.tableEmployee.EmpPictureColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property DOB() As Date
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.DOBColumn), Date)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'DOB' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As Date)
'                Me(Me.tableEmployee.DOBColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property EmployeeDeptName() As String
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.EmployeeDeptNameColumn), String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeDeptName' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As String)
'                Me(Me.tableEmployee.EmployeeDeptNameColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property Employee_Code() As String
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.Employee_CodeColumn), String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_Code' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As String)
'                Me(Me.tableEmployee.Employee_CodeColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property Employee_Name() As String
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.Employee_NameColumn), String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'Employee_Name' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As String)
'                Me(Me.tableEmployee.Employee_NameColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property Picture() As Byte()
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.PictureColumn), Byte())
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'Picture' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As Byte())
'                Me(Me.tableEmployee.PictureColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property Gender() As String
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.GenderColumn), String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'Gender' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As String)
'                Me(Me.tableEmployee.GenderColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Property EmployeeDesignationName() As String
'            Get
'                Try
'                    Return CType(Me(Me.tableEmployee.EmployeeDesignationNameColumn), String)
'                Catch e As Global.System.InvalidCastException
'                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmployeeDesignationName' in table 'Employee' is DBNull.", e)
'                End Try
'            End Get
'            Set(value As String)
'                Me(Me.tableEmployee.EmployeeDesignationNameColumn) = value
'            End Set
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsEmployee_IDNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.Employee_IDColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetEmployee_IDNull()
'            Me(Me.tableEmployee.Employee_IDColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsNICNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.NICColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetNICNull()
'            Me(Me.tableEmployee.NICColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsBlood_GroupNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.Blood_GroupColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetBlood_GroupNull()
'            Me(Me.tableEmployee.Blood_GroupColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsEmpPictureNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.EmpPictureColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetEmpPictureNull()
'            Me(Me.tableEmployee.EmpPictureColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsDOBNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.DOBColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetDOBNull()
'            Me(Me.tableEmployee.DOBColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsEmployeeDeptNameNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.EmployeeDeptNameColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetEmployeeDeptNameNull()
'            Me(Me.tableEmployee.EmployeeDeptNameColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsEmployee_CodeNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.Employee_CodeColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetEmployee_CodeNull()
'            Me(Me.tableEmployee.Employee_CodeColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsEmployee_NameNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.Employee_NameColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetEmployee_NameNull()
'            Me(Me.tableEmployee.Employee_NameColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsPictureNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.PictureColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetPictureNull()
'            Me(Me.tableEmployee.PictureColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsGenderNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.GenderColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetGenderNull()
'            Me(Me.tableEmployee.GenderColumn) = Global.System.Convert.DBNull
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Function IsEmployeeDesignationNameNull() As Boolean
'            Return Me.IsNull(Me.tableEmployee.EmployeeDesignationNameColumn)
'        End Function

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub SetEmployeeDesignationNameNull()
'            Me(Me.tableEmployee.EmployeeDesignationNameColumn) = Global.System.Convert.DBNull
'        End Sub
'    End Class

'    '''<summary>
'    '''Row event argument class
'    '''</summary>
'    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'    Public Class EmployeeRowChangeEvent
'        Inherits Global.System.EventArgs

'        Private eventRow As EmployeeRow

'        Private eventAction As Global.System.Data.DataRowAction

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public Sub New(ByVal row As EmployeeRow, ByVal action As Global.System.Data.DataRowAction)
'            MyBase.New()
'            Me.eventRow = row
'            Me.eventAction = action
'        End Sub

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property Row() As EmployeeRow
'            Get
'                Return Me.eventRow
'            End Get
'        End Property

'        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
'         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
'        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
'            Get
'                Return Me.eventAction
'            End Get
'        End Property
'    End Class
'End Class
